--------------------------------------------------------------------------------
Section 0 - Line up
--------------------------------------------------------------------------------
Player 0 (P0): The Deportees, gang^2
        betrays once then repents if punished
Player 1 (P1): E2, Alternate
        Collude, then alternate.
--------------------------------------------------------------------------------
Section 1 - Player vs. Player
--------------------------------------------------------------------------------
Each column shows pts/round earned against each other player:
             P0     P1
vs. P0 :      0   -371
vs. P1 :    -77      0
TOTAL  :    -77   -371
--------------------------------------------------------------------------------
Section 2 - Leaderboard
--------------------------------------------------------------------------------
Average points per round:
Team name (P#):  Score      with strategy name
The Deport(P0):        -39 points with gang^2                                  
E2        (P1):       -186 points with Alternate                               
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
team2--------------------------------------------------------------------------------
import random
####
# Each team's file must define four tokens:
#     team_name: The Deportees
#     strategy_name: gang^2
#     strategy_description: betrays once then repents if punished
#     move: A function that returns 'c' or 'b'
####

team_name = 'The Deportees' # Only 10 chars displayed.
strategy_name = 'gang^2'
strategy_description = 'betrays once then repents if punished'
    

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b') 
            

        
# Test 2
def move(my_history, their_history, my_score, their_score):
        if len(their_history) == 0:
            return 'c'
        p = sum([s == 'c' for s in their_history]) / len(their_history)
        rnd_num = random.random()
        if rnd_num < p:
            return 'c'
        return 'b'
        
#Test 3
'''def move(my_history, their_history, my_score, their_score):
    if len(my_history) < 2:
        return "c" 
    if 'b' not in their_history:
        return 'b'
    if their_history[-1] == 'b' and my_history[-2] == 'b':
        return "c"
    return their_history
'''--------------------------------------------------------------------------------
example2--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'E2'
strategy_name = 'Alternate'
strategy_description = 'Collude, then alternate.'
    
def move(my_history, their_history, my_score, their_score):
    '''Make my move based on the history with this player.
    
    history: a string with one letter (c or b) per round that has been played with this opponent.
    their_history: a string of the same length as history, possibly empty. 
    The first round between these two players is my_history[0] and their_history[0]
    The most recent round is my_history[-1] and their_history[-1]
    
    Returns 'c' or 'b' for collude or betray.
    '''
    # This player colludes on even numbered rounds (first round is round #0).
    if len(my_history)%2 == 0:
        return 'c'
    else:
        return 'b'
    --------------------------------------------------------------------------------
Section 3 - Game Data for Team The Deportees
--------------------------------------------------------------------------------
-77 pt/round: The Deportees(P0) "gang^2"
-371 pt/round: E2(P1) "Alternate"
CcBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBb
CBcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb

BbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbB
cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team E2
--------------------------------------------------------------------------------
-371 pt/round: E2(P1) "Alternate"
-77 pt/round: The Deportees(P0) "gang^2"
CBcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb
CcBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBb

cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc
BbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbBbB

--------------------------------------------------------------------------------
